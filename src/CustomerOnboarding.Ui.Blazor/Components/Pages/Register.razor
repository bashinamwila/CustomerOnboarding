@page "/register"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@inject Csla.Blazor.ViewModel<UserOnboardingOrchestrator> vm
@inject IDataPortal<UserOnboardingOrchestrator> portal
@inject IDataPortal<CountryList> _portal
@inject Csla.Blazor.State.StateManager StateManager
@inject NavigationManager NavigationManager


@if (vm.Model is null)
{
    <Spinner />
}
else
{
    if (IsBusy)
    {
        <Spinner />
    }
    else
    {
        <div class="flex justify-center items-center min-h-screen bg-gray-100 px-4">
            <div class="w-full max-w-lg bg-white rounded-2xl shadow-md p-8 space-y-6">
                <!-- Google Sign Up -->
                <button class="w-full flex items-center justify-center border border-gray-300 rounded-lg py-2 hover:bg-gray-100 transition">
                    <img src="https://www.svgrepo.com/show/475656/google-color.svg" alt="Google logo" class="h-5 w-5 mr-2" />
                    <span>Sign up with Google</span>
                </button>
                <!-- OR Divider -->
                <div class="flex items-center justify-center">
                    <hr class="flex-grow border-gray-300" />
                    <span class="mx-4 text-sm text-gray-500">or</span>
                    <hr class="flex-grow border-gray-300" />
                </div>
                <!-- Form Fields -->
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700">First Name</label>
                        <input type="text"
                        class="mt-1 w-full border border-gray-300 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                        @bind-value="@(((CreateAccountStep)vm.Model.Steps[0]).User.FirstName)" @bind-value:event="oninput" />
                        <ErrorText PropertyInfo=@(vm.GetPropertyInfo(()=>((CreateAccountStep)vm.Model.Steps[0]).User.FirstName)) />
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Last Name</label>
                        <input type="text" class="mt-1 w-full border border-gray-300 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                        @bind-value="@(((CreateAccountStep)vm.Model.Steps[0]).User.LastName)" @bind-value:event="oninput" />
                        <ErrorText PropertyInfo=@(vm.GetPropertyInfo(()=>((CreateAccountStep)vm.Model.Steps[0]).User.LastName)) />
                    </div>
                    <div class="md:col-span-2">
                        <label class="block text-sm font-medium text-gray-700">Work Email</label>
                        <input type="email" class="mt-1 w-full border border-gray-300 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                        @bind-value="@(((CreateAccountStep)vm.Model.Steps[0]).User.Email)" @bind-value:event="oninput" />
                        <ErrorText PropertyInfo=@(vm.GetPropertyInfo(()=>((CreateAccountStep)vm.Model.Steps[0]).User.Email)) />
                    </div>
                    <div class="md:col-span-2">
                        <label class="block text-sm font-medium text-gray-700">Organisation Name</label>
                        <input type="text" class="mt-1 w-full border border-gray-300 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                        @bind-value="@(((CreateAccountStep)vm.Model.Steps[0]).Organisation.Name)" @bind-value:event="oninput" />
                        <ErrorText PropertyInfo=@(vm.GetPropertyInfo(()=>((CreateAccountStep)vm.Model.Steps[0]).Organisation.Name)) />
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">No. of Employees</label>
                        <input type="number" class="mt-1 w-full border border-gray-300 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                        @bind-value="@(((CreateAccountStep)vm.Model.Steps[0]).Organisation.NumberOfEmployees)" @bind-value:event="oninput" />
                        <ErrorText PropertyInfo=@(vm.GetPropertyInfo(()=>((CreateAccountStep)vm.Model.Steps[0]).Organisation.NumberOfEmployees)) />
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Organisation Phone</label>
                        <input type="tel" class="mt-1 w-full border border-gray-300 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                        @bind-value="@(((CreateAccountStep)vm.Model.Steps[0]).User.PhoneNumber)" @bind-value:event="oninput" />
                        <ErrorText PropertyInfo=@(vm.GetPropertyInfo(()=>((CreateAccountStep)vm.Model.Steps[0]).User.PhoneNumber)) />
                    </div>
                    <div class="md:col-span-2">
                        <label class="block text-sm font-medium text-gray-700">Country</label>
                        @if(countries is not null)
                        {
                            <select class="mt-1 w-full border border-gray-300 rounded-md p-2 bg-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                            @bind-value="@(((CreateAccountStep)vm.Model.Steps[0]).Organisation.Country)" @bind-value:event="onchange">
                                <option value="">Select a country</option>
                                @foreach(var country in countries)
                                {
                                    <option value="@country.Id">@country.Name</option>
                                }

                            </select>
                        }
                        <ErrorText PropertyInfo=@(vm.GetPropertyInfo(()=>((CreateAccountStep)vm.Model.Steps[0]).Organisation.Country)) />
                    </div>

                    <!-- Password Fields with Toggle Visibility -->
                    <div class="md:col-span-2">
                        <label class="block text-sm font-medium text-gray-700">Create Password</label>
                        <div class="relative">
                            <input type="@(showPassword ? "text" : "password")" class="mt-1 w-full border border-gray-300 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                            @bind-value="@(((CreateAccountStep)vm.Model.Steps[0]).User.Password)" @bind-value:event="oninput" />
                            <button type="button" @onclick="TogglePassword" class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-600 cursor-pointer mt-1">
                                @if (showPassword)
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
                                    </svg>
                                }
                                else
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                    </svg>
                                }
                            </button>
                        </div>
                        <ErrorText PropertyInfo=@(vm.GetPropertyInfo(()=>((CreateAccountStep)vm.Model.Steps[0]).User.Password)) />
                    </div>
                    <div class="md:col-span-2">
                        <label class="block text-sm font-medium text-gray-700">Confirm Password</label>
                        <div class="relative">
                            <input type="@(showConfirmPassword ? "text" : "password")" class="mt-1 w-full border border-gray-300 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                            @bind-value="@(((CreateAccountStep)vm.Model.Steps[0]).User.ConfirmPassword)" @bind-value:event="oninput" />
                            <button type="button" @onclick="ToggleConfirmPassword" class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-600 cursor-pointer mt-1">
                                @if (showConfirmPassword)
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
                                    </svg>
                                }
                                else
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                    </svg>
                                }
                            </button>
                        </div>
                        <ErrorText PropertyInfo=@(vm.GetPropertyInfo(()=>((CreateAccountStep)vm.Model.Steps[0]).User.ConfirmPassword)) />
                    </div>
                </div>
                <!-- Create Account Button -->
                <button @onclick=@CreateAccount class="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 rounded-md font-semibold transition disabled:bg-blue-300 disabled:cursor-not-allowed" disabled="@(!((CreateAccountStep)vm.Model.Steps[0]).IsValid)">
                    Create Account
                </button>
            </div>
        </div>
    }
}




@code {
    private bool showPassword = false;
    private bool showConfirmPassword = false;
    private bool IsBusy = false;
    private CountryList countries = default!;

    private void TogglePassword()
    {
        showPassword = !showPassword;
    }

    private void ToggleConfirmPassword()
    {
        showConfirmPassword = !showConfirmPassword;
    }

    protected override async Task OnInitializedAsync()
    {
        await StateManager.InitializeAsync();
        vm.ModelPropertyChanged += async (s, e) =>
        {
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        };



        IsBusy = true;
        countries = await _portal.FetchAsync();
       
        await vm.RefreshAsync(() => portal.CreateAsync());
        ((CreateAccountStep)vm.Model.Steps[0]).User.PropertyChanged += async (s, e) => await InvokeAsync(() => StateHasChanged());
        ((CreateAccountStep)vm.Model.Steps[0]).Organisation.PropertyChanged += async (s, e) => await InvokeAsync(() => StateHasChanged());
        ((CreateAccountStep)vm.Model.Steps[0]).PropertyChanged += async (s, e) => await InvokeAsync(() => StateHasChanged());
        IsBusy = false;
    }

   

    private async Task CreateAccount()
    {
        IsBusy=true;
        await vm.Model.MoveNextAsync();
        IsBusy = false;
        NavigationManager.NavigateTo("/confirm-email");
    }
}
