@page "/onboarding"
@layout AdminLayout
@rendermode InteractiveServer
@using CustomerOnboarding.Ui.Blazor.Components.Onboarding
@using CustomerOnboarding.BusinessLibrary.Multitenancy
@inject ViewModel<TenantOnboardingOrchestrator> ViewModel
@inject IDataPortalFactory portal
@inject Csla.Blazor.State.StateManager StateManager
@inject TenantInfo tenant
@inject ILogger<Onboarding> logger

@if(ViewModel.Model is null)
{
    <Spinner />
}
else
{
    if (IsBusy)
    {
        <Spinner />
    }
    else
    {
        <Sidebar ProgressPercent="17%" ActiveStep=@ViewModel.Model.CurrentStepIndex Steps="@OnboardingSteps" OnStepClick="HandleStepClick" />
        <div class=@($"flex-1 p-4 md:p-6 overflow-y-auto {(ViewModel.Model.CurrentStepIndex==0?null:"hidden")}")>
            <OrganisationProfileStep ViewModel="ViewModel" OnClickSaveAndContinue=@SaveAndContinueStep1 />
        </div>
        <div class=@($"flex-1 p-4 md:p-6 overflow-y-auto {(ViewModel.Model.CurrentStepIndex==1?null:"hidden")}")>
            <BankingDetailsStep ViewModel="ViewModel" OnClickSaveAndContinue=@SaveAndContinueStep2 />
        </div>


    }
}

@code {
    private bool IsBusy = false;

    private List<Sidebar.SidebarStep> OnboardingSteps = new()
    {
        new() { Index = 0, Title = "Company Profile" },
        new() { Index = 1, Title = "Banking Details" },
        new() { Index = 2, Title = "Compliance Info" },
        new() { Index = 3, Title = "Payroll Configuration" },
        new() { Index = 4, Title = "Payroll Structure" },
        new() { Index = 5, Title = "Compensation Components" },
        new() { Index = 6, Title = "Deductions Setup" },
        new() { Index = 7, Title = "Employer Contributions" },
        new() { Index = 8, Title = "Accruals" },
        new() { Index = 9, Title = "Loans" },
        new() { Index = 10, Title = "Add Employees" },
        new() { Index = 11, Title = "Integrations" },
        new() { Index = 12, Title = "Select Payment Plan" },
        new() { Index = 13, Title = "Completion" }
    };

    private void HandleStepClick(Sidebar.SidebarStep step)
    {
        Console.WriteLine($"User clicked step: {step.Index} - {step.Title}");
    }

    protected override async Task OnParametersSetAsync()
    {
        IsBusy = true;

        await ViewModel.RefreshAsync(() => portal.GetPortal<TenantOnboardingOrchestrator>().CreateAsync());
        if(ViewModel.Model is not null)
        {
            foreach (var step in ViewModel.Model.Steps)
            {
                OnboardingSteps[step.StepIndex].IsCompleted = step.IsCompleted;
            }
        }
        StateHasChanged();
        IsBusy = false;
    }

    protected override async Task OnInitializedAsync()
    {
        ViewModel.ModelPropertyChanged += async (s, e) =>
        {
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        };



        await StateManager.InitializeAsync();

    }

    private async Task SaveAndContinueStep1()
    {
        IsBusy = true;
        await ViewModel.Model.MoveNextAsync();
        ViewModel.Model = null!;
        await ViewModel.RefreshAsync(() => portal.GetPortal<TenantOnboardingOrchestrator>().FetchAsync(tenant.Id));
        if (ViewModel.Model is not null)
        {
            foreach (var step in ViewModel.Model.Steps)
            {
                OnboardingSteps[step.StepIndex].IsCompleted = step.IsCompleted;
            }
        }
        IsBusy = false;

    }

    private async Task SaveAndContinueStep2()
    {
        
    }

    
}
