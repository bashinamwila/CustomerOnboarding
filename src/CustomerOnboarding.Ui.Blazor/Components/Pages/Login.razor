@page "/login"
@layout MinimalLayout
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Claims
@inject Csla.Blazor.State.StateManager StateManager
@inject IHttpContextAccessor httpContextAccessor
@inject NavigationManager NavigationManager
@inject IDataPortal<UserValidation> portal

<div class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
        <div class="text-center">
            <!-- Logo Placeholder -->
            <div class="mx-auto h-12 w-12 rounded-full bg-blue-600 flex items-center justify-center">
                <span class="text-white text-xl font-bold">B</span>
            </div>
            <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
                Welcome to Benefito
            </h2>
            <p class="mt-2 text-center text-sm text-gray-600">
                Sign in to your HR & Payroll dashboard
            </p>
        </div>

        <div class="mt-8 bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
            <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" class="space-y-6" FormName="loginform">
                <DataAnnotationsValidator />

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="p-3 bg-red-50 border border-red-200 rounded-md">
                        <p class="text-sm text-red-600">@errorMessage</p>
                    </div>
                }

                <div>
                    <label for="email" class="block text-sm font-medium text-gray-700">
                        Email address
                    </label>
                    <div class="mt-1">
                        <InputText id="email"
                        @bind-Value="loginModel.Email"
                        type="email"
                        autocomplete="email"
                        class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                        placeholder="you@company.com" />
                    </div>
                    <ValidationMessage For="@(() => loginModel.Email)" class="mt-1 text-xs text-red-600" />
                </div>

                <div>
                    <label for="password" class="block text-sm font-medium text-gray-700">
                        Password
                    </label>
                    <div class="mt-1">
                        <InputText id="password"
                        type="password"
                        @bind-Value="loginModel.Password"
                        autocomplete="current-password"
                        class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                        placeholder="••••••••" />
                    </div>
                    <ValidationMessage For="@(() => loginModel.Password)" class="mt-1 text-xs text-red-600" />
                </div>

                <div class="flex items-center justify-between">
                    <div class="flex items-center">
                        <InputCheckbox id="remember-me" @bind-Value="loginModel.RememberMe" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                        <label for="remember-me" class="ml-2 block text-sm text-gray-900">
                            Remember me
                        </label>
                    </div>

                    <div class="text-sm">
                        <a href="/forgot-password" class="font-medium text-blue-600 hover:text-blue-500">
                            Forgot your password?
                        </a>
                    </div>
                </div>

                <div>
                    <button type="submit"
                    class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        Sign in
                    </button>
                </div>
            </EditForm>

            <div class="mt-6">
                <div class="relative">
                    <div class="absolute inset-0 flex items-center">
                        <div class="w-full border-t border-gray-300"></div>
                    </div>
                    <div class="relative flex justify-center text-sm">
                        <span class="px-2 bg-white text-gray-500">
                            New to Benefito?
                        </span>
                    </div>
                </div>

                <div class="mt-6">
                    <button @onclick="NavigateToSignUp"
                    class="w-full flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        Create a new account
                    </button>
                </div>
            </div>
        </div>

        <p class="mt-3 text-center text-xs text-gray-500">
            &copy; 2025 Benefito. All rights reserved.
        </p>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    public LoginModel loginModel { get; set; } = new LoginModel();
    private string errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        await StateManager.InitializeAsync();
        var userValidation = await portal.FetchAsync(loginModel.Email, loginModel.Password);
        ClaimsPrincipal principal=default!;
        if (userValidation.IsValid)
        {
            var identity = new ClaimsIdentity("Custom");
            var claims=new List<Claim>();
            claims.Add(new Claim(ClaimTypes.Name, userValidation.Email));
            claims.Add(new Claim(ClaimTypes.GivenName, userValidation.FirstName));
            claims.Add(new Claim(ClaimTypes.Surname, userValidation.LastName));
            claims.Add(new Claim("TenantId", userValidation.TenantId, ClaimValueTypes.String));
            identity.AddClaims(claims);
            principal = new ClaimsPrincipal(identity);
            var httpContext = httpContextAccessor.HttpContext;
            if (httpContext is not null)
            {
                AuthenticationProperties authProperties = new AuthenticationProperties();
                await httpContext.SignInAsync(
                  CookieAuthenticationDefaults.AuthenticationScheme,
                  principal,
                  authProperties);
                NavigationManager.NavigateTo("/dashboard");
            }
        }
        else
        {
            errorMessage = "Invalid credentials";
            //StateHasChanged();
        }
        

    }

    private void NavigateToSignUp()
    {
        NavigationManager.NavigateTo("/register");
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
         public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; }
    }
}